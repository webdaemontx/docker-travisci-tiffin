<?php
/**
* @file
 * Code for the Tiffin NPC feature.
*/

/**
 * Implements hook_menu()
 */
function tiffin_npc_menu() {
  // Module settings.
  $items['forms/netprice/success'] = array(
    'title' => t('Net Price Calculator - Form Submitted'),
    'description' => t('Net Price Calculator Success Page'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tiffin_npc_success'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function tiffin_npc_success() {

  if (isset($_GET['uniqid'])) {
    $uniqid = check_plain($_GET['uniqid']);
  }

  $form = array();


  $result = db_select('tiffin_npc_table', 'npc')
    ->fields('npc')
    ->condition('calculationGUID', $uniqid, '=')
    ->execute()
    ->fetchAssoc();

  $first = $result['first'];
  $last = $result['last'];
  $email = $result['email'];
  $address = $result['address'];
  $address_2 = $result['address_2'];
  $city = $result['city'];
  $state = $result['state'];
  $zip = $result['zip'];
  $county = $result['county'];
  $phone_type = $result['phone_type'];
  $phone_number = $result['phone_number'];
  $high_school_grad_year = $result['high_school_grad_year'];
  $prep_courses_score = $result['prep_courses_score'];
  $high_school_gpa = $result['high_school_gpa'];
  $sat_act = $result['satact'];
  $sat = $result['sat'];
  $act = $result['act'];
  $intended_major = $result['intended_major'];
  $born_before_1973 = $result['born_before_1973'];
  $married = $result['married'];
  $in_masters_or_doctorate_program = $result['in_masters_or_doctorate_program'];
  $active_duty = $result['active_duty'];
  $veteran = $result['veteran'];
  $have_dependent_children = $result['have_dependent_children'];
  $other_dependents = $result['other_dependents'];
  $parents_deceased = $result['parents_deceased'];
  $emancipated_or_guardianship = $result['emancipated_or_guardianship'];
  $unaccompanied_youth = $result['unaccompanied_youth'];
  $homeless_youth = $result['homeless_youth'];
  $efc = $result['efc'];
  $ohio_residents = $result['ohio_residents'];
  $extra_curricular_activities = $result['extra_curricular_activities'];
  $scholarships = $result['scholarships'];
  $which_activity = $result['which_activity'];
  $extra_activity = $result['extra_activity'];
  $this_year = date('Y');
  $next_year = (date( 'Y') + 1);


  // returns a double value from 0 to ~75 that determines scholarship eligibility
  $actsat_value = _get_actsat_score($sat_act, $sat, $act, $high_school_gpa, $prep_courses_score);

  $scholarship = _get_scholarships($actsat_value);

  $ocog = _get_ohio_community_grant($efc, $ohio_residents);

  $pell_grant = _get_pell_grant($efc);

  $tuition = 36600;

  $total_finaid = $scholarship[1] + $pell_grant[0] + 3500 + 2000 + $ocog[0] + $ocog[1];

  $finaidcost = $scholarship[1] + $pell_grant[0] + 5500;

  $outofpocket = $tuition - $scholarship[1] - $pell_grant[0] - 5500;


  $success_body =
    "<p><strong>Congratulations on completing the Tiffin University Net Price Calculator!</strong><br>
Below you will find a summary of the estimated costs for the 2017-2018 academic year and your estimated eligibility for student aid.</p>

<hr><table width='80%'><tr><td width='50%'>
<strong>Student Information</strong><br>
First Name: " . ucfirst($first) . "<br>
Last Name: " . ucfirst($last) . "<br>
Email Address: " . $email . "<br>
Street Address Line 1: " . ucfirst($address) . "<br>
Street Address Line 2: " . ucfirst($address_2) . "<br>
City: " . ucfirst($city) . "<br>
State: " . $state . "<br>
Zip: " . $zip . "<br>
County: " . ucfirst($county) . "<br>
Phone Type: " . ucfirst($phone_type) . "<br>
Phone Number: " . $phone_number . "<br><br>
</td><td width='50%'>
<strong>Student Academics</strong><br>
High School Graduation Year: " . $high_school_grad_year . "<br>
College Prep Score: " . $prep_courses_score . "<br>
H.S. GPA: " . $high_school_gpa . "<br>";

  if ($sat_act == 'sat') {
    $success_body .= 'SAT: ' . $sat . '<br>';
  }
  elseif ($sat_act == 'act') {
    $success_body .= 'ACT: ' . $act . '<br>';
  }

  $success_body .= 'Intended Major: ' . ucfirst($intended_major) . '<br><br>';

  $success_body .= "<strong>Student Activities</strong><br>
Contact with Coach/Director:  $scholarships  <br>
Sport/Activity 1:  ucfirst($which_activity) <br>
Sport/Activity 2:  ucfirst($extra_activity) <br><br>";

  $success_body .= "<strong>Student Financials</strong><br>
Estimated AGI: $" . number_format(0) . "<br>
EFC: $" . number_format($efc) . "<br>
Dependent Children: " . ucfirst($have_dependent_children) . "<br>
Ohio Resident:" . ucfirst($ohio_residents) . "<br><br>
</td></tr></table><hr><table width='80%'><tr><td width='50%'>
<strong>Estimated cost for the $this_year-$next_year Academic Year</strong>
<br><br>
<b>Tuition and Fees ($this_year-$next_year)</b><br>
Tuition....................................................$23,700<br>
Room (double) with Air Cond.........................$5,900<br>
Board (unlimited meals)..........................$5,000<br>
Books (estimate).....................................$2,000<br>
Total Cost...............................................$36,600<br>
</p></td>
<td width='50%' valign='top'><strong>Summary of Costs</strong><br><br>
Total Cost..............................................$36,600<br>
<u>Financial Aid..........................................$" . number_format($finaidcost) . "</u><br>
Total Out-of-Pocket Costs........................$" . number_format($outofpocket) . "<br>
</td></tr></table><hr><br>
<h3>Your estimated financial aid:</h3>
<br><br>";

  if ($scholarship[1] != 0) {
    $success_body .= "<strong>Institutional Grants and Scholarships</strong><br>" .
      $scholarship[0] . "...................$" . number_format($scholarship[1]) . "<br><br>";
  }
  $success_body .= "<strong>Work-Study</strong><br>";
  if ($efc >= 0 && $efc <= 5273) {
    $success_body .= "Federal Work-Study...............................$1,000<br>(This can be earned in a paycheck through an on campus job.)<br><br>";
  }
  else {
    $success_body .= "Federal Work-Study...............................$0<br><br>";
  }

  $success_body .= "<strong>Grants</strong><br>";
  if ($pell_grant[0] > 0) {
    $success_body .= "Pell Grant................................................$" . number_format($pell_grant[0]) . "<br>";
  } elseif ($ocog >0) {
    $success_body .= "Ohio College Opportunity Grant............................$" . number_format($ocog) . "<br>";
    $success_body .= "(Estimate based on Ohio funding and eligibility)" . "<br>";
  } else {
    $success_body .= "<br><br>";
  }



  $success_body .= "<strong>Federal Loans</strong><br>
Federal Direct Stafford Subsidized  Loan.........................$3,500<br>";

  if ($born_before_1973 == 'yes' || $in_masters_or_doctorate_program == 'yes' || $married == 'yes' || $have_dependent_children == 'yes' || $parents_deceased == 'yes' || $veteran == 'yes' || $active_duty == 'yes' || $other_dependents == 'yes' || $emancipated_or_guardianship == 'yes' || $unaccompanied_youth == 'yes' || $homeless_youth == 'yes') {

  $success_body .= "Federal Direct Stafford Unubsidized Loan........................$6,000<br><br>";
} else {
  $success_body .= "Federal Direct Stafford Unubsidized Loan........................$2,000<br><br>";
}

$success_body .= "<h3>Your Estimated Out-of-Pocket Costs...$" . number_format($outofpocket) . " *</h3><br><br><hr><br>";

$success_body .= "<strong>Be sure to complete your free application for federal student aid (FAFSA) at <a href='http://www.fafsa.ed.gov' target='_new'>www.fafsa.ed.gov</a><br/><br>";

$success_body .= "<strong><u>Financial Aid Not Enough?</u></strong><br>Here are other ways to help you finance your education<br>";

$success_body .= "<ol><li>Tiffin University's <a href='/bursar/payment' target='_new'>Payment Plan</a></li>
<li>Private <a href='http://www.tiffin.edu/finaid/loans' target='_new'>Alternative Loans</a></li>
<li>Federal Direct <a href='http://www.studentloans.gov' target='_new'>Parent PLUS </a>Loan</li></ol><br><hr>";

if ($scholarship[1] > 0) {
  $success_body .= "*Scholarships which are based on estimated information cannot be guaranteed.<br>";
}

$success_body .= "<br>*These calculations do not include other forms of aid, such as other Federal Grants (SEOG), athletic or activity based scholarships, or scholarships from other sources. You may wish to search for other sources of aid by visiting <a href='http://www.fastweb.org' target='_blank'>http://www.fastweb.org</a> or <a href='http://www.chegg.com/scholarships' target='_blank'>http://www.chegg.com/scholarships</a> which offer free scholarship searches.<br><br>
<h4>Your &quot;Estimated Net Price&quot; is calculated based on the information you provided. This Net Price Calculator gives estimates of your cost of attendance and net price. These estimates do not represent a final determination or actual award of financial assistance or the final net price. Any estimates calculated will not be guaranteed by the Secretary of Education, the State, or the school. The school has the final authority on determining the financial aid award.</h4>
<p>While all care has been taken to produce estimates that are accurate based on the information provided to us by the student or user, cost of attendance and financial aid availability is subject to change without notice. Any future changes made by the federal government, state agencies, or institution could   result in a different award. Also, any outside/private scholarship or financial   assistance may reduce your aid award.</p>
<p>Students must complete the Free Application for Federal Student Aid (FAFSA) in order to determine their eligibility for, and receive an actual financial aid award that includes federal grant, loan, and work-study assistance. For information on applying for federal student aid, go to <strong><a href='http://www.fafsa.ed.gov' target='_blank'>www.fafsa.ed.gov</a></strong>.</p>
<p>If you have any Remaining Cost, the loan amount is suggested as an option for   meeting this portion of your costs. Our ten month payment plan is also available as a resource. The amount shown represents the maximum amount which you would be entitled to borrow. Actual borrowing will be your choice and is subject to credit approval.</p>
</td></tr></table></center>";

  $form['description'] = array(
    '#markup' => $success_body,
  );

  $to = $email;

  drupal_mail('tiffin_npc', 'npc_calculator', $to->mail, language_default(), array('recipient' => $to, 'success_body' => $success_body));

  //tiffin_npc_mail('tiffin_npc', $success_body, $to);

return $form;
}

/**
function tiffin_npc_menu() {
$items = array();
$items['tiffin_npc_form'] = array(
'title' => t('Net Price Calculator'),
'page callback' => 'drupal_get_form',
'page arguments' => array('tiffin_npc_form'),
'access arguments' => array('access content'),
'description' => t('Tiffin NPC'),
'type' => MENU_NORMAL_ITEM,
);
return $items;
}
 */

/**
 * Implements hook_block_info().
 */
function tiffin_npc_block_info() {
  $blocks = array();

  $blocks['tiffin_npc'] = array(
    'info' => t('Net Price Calculator block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function tiffin_npc_block_view($delta) {
  $block = array();

  switch ($delta) {
    case 'tiffin_npc':
      $block['subject'] = t('Net Price Calculator');
      $block['content'] = drupal_get_form('tiffin_npc_netprice_form');
      break;
  }
  return $block;
}


function tiffin_npc_form() {
  return drupal_get_form('tiffin_npc_netprice_form');
}
/**
 * Returns the render array for the form.
 * Adds logic to the form builder to give it two pages.
 * It checks a value in $form_state['storage']
 */
function tiffin_npc_netprice_form($form, &$form_state) {
  // Display page 2 if $form_state['storage']['page_two'] is set
  if (isset($form_state['storage']['page_two'])) {
    return tiffin_npc_netprice_form_page_two();
  }

  $form['agreement'] = array(
    '#type' => 'radios',
    '#title' => t('Agreement'),
    '#options' => array(
      'agree' => t('Agree'),
      'disagree' => t('Disagree'),
    ),
    '#required' => TRUE,
  );

  $form['next'] = array(
    '#type' => 'submit',
    '#value' => 'Next >>',
  );

  return $form;
}

function tiffin_npc_netprice_form_page_two() {
  $states_options = array(
    '' => t('--- Select ---'),
    'AL' => t('Alabama'),
    'AK' => t('Alaska'),
    'AZ' => t('Arizona'),
    'AR' => t('Arkansas'),
    'CA' => t('California'),
    'CO' => t('Colorado'),
    'CT' => t('Connecticut'),
    'DE' => t('Delaware'),
    'DC' => t('District of Columbia'),
    'FL' => t('Florida'),
    'GA' => t('Georgia'),
    'HI' => t('Hawaii'),
    'ID' => t('Idaho'),
    'IL' => t('Illinois'),
    'IN' => t('Indiana'),
    'IA' => t('Iowa'),
    'KS' => t('Kansas'),
    'KY' => t('Kentucky'),
    'LA' => t('Louisiana'),
    'ME' => t('Maine'),
    'MD' => t('Maryland'),
    'MA' => t('Massachusetts'),
    'MI' => t('Michigan'),
    'MN' => t('Minnesota'),
    'MS' => t('Mississippi'),
    'MO' => t('Missouri'),
    'MY' => t('Montana'),
    'NE' => t('Nebraska'),
    'NV' => t('Nevada'),
    'NH' => t('New Hampshire'),
    'NJ' => t('New Jersey'),
    'NM' => t('New Mexico'),
    'NY' => t('New York'),
    'NC' => t('North Carolina'),
    'ND' => t('North Dakota'),
    'OH' => t('Ohio'),
    'OK' => t('Oklahoma'),
    'OR' => t('Oregon'),
    'PA' => t('Pennsylvania'),
    'RI' => t('Rhode Island'),
    'SC' => t('South Carolina'),
    'SD' => t('South Dakota'),
    'TN' => t('Tennessee'),
    'TX' => t('Texas'),
    'UT' => t('Utah'),
    'VT' => t('Vermont'),
    'VA' => t('Virginia'),
    'WA' => t('Washington'),
    'WV' => t('West Virginia'),
    'WI' => t('Wisconsin'),
    'WY' => t('Wyoming'),
  );

  $form['personal_info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Name'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
    $form['personal_info']['first'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => "First name",
      '#description' => "Please enter your first name.",
      '#size' => 20,
      '#maxlength' => 20,
    );
    $form['personal_info']['last'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => "Last name",
      '#description' => "Please enter your last name.",
      '#size' => 20,
      '#maxlength' => 30,
    );

  $form['personal_info']['email'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => "Email Address",
    '#description' => "Please enter your email address.",
    '#size' => 20,
    '#maxlength' => 50,
  );
  $form['personal_info']['address'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => "Address",
    '#description' => "Please enter your street address.",
    '#size' => 20,
    '#maxlength' => 50,
  );
  $form['personal_info']['address_2'] = array(
    '#type' => 'textfield',
    '#title' => t(''),
    '#required' => FALSE,
    '#size' => 20,
    '#maxlength' => 50,
  );
  $form['personal_info']['city'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => "City",
    '#description' => "Please enter your city.",
    '#size' => 20,
    '#maxlength' => 50,
  );

   $form['personal_info']['state'] = array(
        '#description' => "Your home state",
        '#type' => 'select',
        '#options' => $states_options,
        '#empty_option' => t('-- Select --'),
        //'#default_value' => $state,
        '#required' => TRUE,
      );

  $form['personal_info']['zip'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => "Zip Code",
    '#description' => "Please enter your Zip Code.",
    '#size' => 10,
    '#maxlength' => 15,
  );

  $form['personal_info']['county'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => "County",
    '#description' => "Please enter your county.",
    '#size' => 10,
    '#maxlength' => 100,
  );

  $form['personal_info']['phone_type'] = array(
    '#type' => 'select',
    '#title' => t('Phone Type'),
    '#description' => "Select your phone number type.",
    '#options' => array(
      'home' => t('Home'),
      'cell' => t('Cell'),
      'work' => t('Work'),
    ),
    '#required' => TRUE,
  );


  $form['personal_info']['phone_number'] = array(
    '#type' => 'textfield',
    '#title' => 'Phone Number',
    '#description' => "Primary phone number.",
    '#required' => TRUE,
    '#size' => 15,
    '#maxlength' => 15,
  );

  $form['academic_info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Academic Information'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $grad_year_min = (date('Y') - 15);
  $grad_year_max = (date('Y') + 4);

  $form['academic_info']['high_school_grad_year'] = array(
    '#title' => 'High School Graduation Year',
    '#type' => 'select',
    '#options' => drupal_map_assoc(range($grad_year_min, $grad_year_max)),
    '#required' => TRUE,
  );

  $prep_course_score_min = 0;
  $prep_course_score_max = 10;
    $form['academic_info']['prep_courses_score'] = array(
      '#type' => 'select',
      '#title' => 'College Prep Courses Score',
      '#options' => drupal_map_assoc(range($prep_course_score_min, $prep_course_score_max)),
      '#width' => '30%',
      '#align' => 'center',
      '#required' => TRUE,
      '#maxlength' => 3,
      '#suffix' => '<div><a href="/finaid/prepscore">View Points Table First to Determine Score</a></div><br><br>',
    );

  $gpa_array = array("1.0","1.1","1.2","1.3","1.4","1.5","1.6","1.7","1.8","1.9","2.0","2.1","2.2","2.3","2.4","2.5","2.6","2.7","2.8","2.9","3.0","3.1","3.2","3.3","3.4","3.5","3.6","3.7","3.8","3.9","4.0");
  $form['academic_info']['high_school_gpa'] = array(
    '#type' => 'select',
    '#title' => 'High School Cumulative GPA',
    '#options' => drupal_map_assoc($gpa_array),
    '#width' => '30%',
    '#align' => 'center',
    '#required' => true,
    '#maxlength' => 5,
  );

  $form['academic_info']['satact'] = array(
    '#type' => 'radios',
    '#title' => t('Did you take ACT or SAT?'),
    '#options' => array(
      'sat' => t('SAT'),
      'act' => t('ACT'),
    ),
    '#required' => TRUE,
  );

  $sat_scores = array("510-550", "550-610", "620-660", "670-710", "720-760", "770-810", "820-850", "860-890", "900-930", "940-970", "980-1010", "1020-1040", "1050-1080", "1090-1120", "1130-1160", "1170-1200", "1210-1240", "1250-1280", "1290-1320", "1330-1350", "1360-1390", "1400-1430", "1440-1480", "1490-1530", "1540-1590", "1600");
  $form['academic_info']['sat'] = array(
    '#type' => 'select',
    '#title' => 'Composite SAT score',
    '#description' => t('combination of verbal and math score only'),
    '#options' => drupal_map_assoc($sat_scores),
    '#maxlength' => 10,
    '#states' => array(
      'visible' => array(
        ':input[name="satact"]' => array(
          'value' => 'sat',
        ),
      ),
    ),
  );

  $act_min = 11;
  $act_max = 36;
  $form['academic_info']['act'] = array(
    '#type' => 'select',
    '#title' => 'Composite ACT score',
    '#options' => drupal_map_assoc(range($act_min, $act_max)),
    '#width' => '30%',
    '#align' => 'center',

    '#maxlength' => 3,
    '#states' => array(
      'visible' => array(
        ':input[name="satact"]' => array(
          'value' => 'act',
        ),
      ),
    ),
  );

  $form['academic_info']['intended_major'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => "Intended Major",
    '#description' => "Please provide your intended major.",
    '#size' => 10,
    '#maxlength' => 100,
  );

  $form['dependency_status'] = array(
    '#type' => 'fieldset',
    '#title' => t('Dependency Status'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $born_before = (date('Y') - 23);
  $form['dependency_status']['born_before_1973'] = array(
    '#type' => 'radios',
    '#title' => t("Were you born before January 1, $born_before?"),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#required' => TRUE,
  );

  $form['dependency_status']['married'] = array(
    '#type' => 'radios',
    '#title' => t('As of today, are you married? (Answer "Yes" if you are separated but not divorced.)'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#required' => TRUE,
  );

  $form['dependency_status']['in_masters_or_doctorate_program'] = array(
    '#type' => 'radios',
    '#title' => t('At the beginning of the 2017-2018 school year, will you be working on a master\'s or doctorate program (such as an M.A., M.B.A., M.D., J.D., Ph.D., EdD., graduate certificate, etc.)?'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#required' => TRUE,
  );

  $form['dependency_status']['active_duty'] = array(
    '#type' => 'radios',
    '#title' => t('Are you currently serving on active duty in the U.S. armed forces for purposes other than training? (If you are a National Guard of Reserves enlistee, are you on active duty for other than state or training purposes?'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#required' => TRUE,
  );

  $veteran_date = (date('Y') + 1);
  $form['dependency_status']['veteran'] = array(
    '#type' => 'radios',
    '#title' => t('Are you a veteran of the U.S. Armed Forces?'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#required' => TRUE,
    '#description' => t('<p><strong>Answer No</strong> (you are not a veteran) if you (1) have never engaged in active duty in the U.S. armed forces, (2) are currently a Reserve Officers\' Training Corps (ROTC) student or a cadet or midshipman at a service academy, (3) are a National Guard or Reserves enlistee activated only for state or training purposes, or (4) were engaged in active duty in the U.S. armed forces but released under dishonorable conditions. Also answer No if you are currently serving in the U.S. armed forces and will continue to serve through June 30,' .  $veteran_date . '.</p>

<p><strong>Answer Yes</strong> (you are a veteran) if you (1) have engaged in active duty in the U.S. armed forces or are a National Guard or Reserves enlistee who was called to active duty for other than state or training purposes, or were a cadet or midshipman at one of the service academies and (2) were released under a condition other than dishonorable. Also answer Yes if you are not a veteran now but will be one by June 30, '. $veteran_date .'.</p>'),
  );

  $form['dependency_status']['have_dependent_children'] = array(
    '#type' => 'radios',
    '#title' => t('Do you have children who will receive more than half of their support from you between July 1,' . (date('Y')) . ' and June 30, ' . (date('Y') + 1) . ' ?'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#required' => TRUE,
  );

  $form['dependency_status']['other_dependents'] = array(
    '#type' => 'radios',
    '#title' => t('Do you have dependents (other than your children or spouse) who live with you and who receive more than half of their support from you, now and through June 30, ' . (date('Y') + 1) . ' ?'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#required' => TRUE,
  );

  $form['dependency_status']['parents_deceased'] = array(
    '#type' => 'radios',
    '#title' => t('At any time since you turned age 13, were both your parents deceased, were you in foster care, or were you a dependent or ward of the court?'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#required' => TRUE,
  );

  $form['dependency_status']['emancipated_or_guardianship'] = array(
    '#type' => 'radios',
    '#title' => t('Has it been determined by a court in your state of legal residence that you are an emancipated minor or that you are in a legal guardianship?'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#required' => TRUE,
  );

  $form['dependency_status']['unaccompanied_youth'] = array(
    '#type' => 'radios',
    '#title' => t('At any time on or after July 1, ' . (date('Y') - 1) . ', were you determined to be an unaccompanied youth who was homeless, as determined by (a) your high school or district homeless liaison or (b) the director of an emergency shelter or transitional housing program funded by the U.S. Department of Housing and Urban Development?'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#required' => TRUE,
  );

  $form['dependency_status']['homeless_youth'] = array(
    '#type' => 'radios',
    '#title' => t('At any time on or after July 1, ' . (date('Y') - 1) . ', did the director of a runaway or homeless youth basic center or transitional living program determine that you were an unaccompanied youth who was homeless or were self-supporting and at risk of being homeless?'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#required' => TRUE,
  );

  $form['dependency_status']['dependent_student'] = array(
    '#markup' => t('<p>If you answered <strong>YES</strong> to any of the above questions you are an <strong>independent student</strong>.</p>

<p>If you answered <strong>NO</strong> to all the questions above you are a <strong>dependent student</strong>.</p>

<p><strong><em>A dependent child</em></strong> does not have to live with you, so long as the child receives more than half of his/her support from you. The child may include a biological or adopted child, or a child for whom you are the legal guardian. Note that generally speaking, if the child meets the 50% support test, the child should be claimed as an exemption on your income tax return.</p>'),
  );


  $form['efc'] = array(
    '#type' => 'fieldset',
    '#title' => t('Expected Family Contribution (EFC)'),
    '#description' => t('To determine your Expected Family Contribution (EFC), you must go to the FinAid quick EFC calculator. ( <a href="http://www.finaid.org/calculators/scripts/quickefc.cgi" target="_blank">Click here to calculate your EFC</a> .) You will need your and your parent\'s most recent federal tax information to complete this section. Once you have calculated your EFC, close that browser window to return to this one.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['efc']['expected_family_income'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => "Your Expected Family Income",
    '#description' => "Insert your TOTAL EXPECTED FAMILY CONTRIBUTION here",
    '#size' => 10,
    '#maxlength' => 15,
  );

  $form['efc']['ohio_residents'] = array(
    '#type' => 'radios',
    '#title' => t('Have you or your parent(s) continuously lived in Ohio for at least the last 12 months?'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#required' => TRUE,
  );

  $form['activities'] = array(
    '#type' => 'fieldset',
    '#title' => t('Activities'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['activities']['extra_curricular_activities'] = array(
    '#type' => 'radios',
    '#title' => t('Do you expect to participate in any extra curricular activities?'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#required' => TRUE,
  );

  $form['activities']['scholarships'] = array(
    '#type' => 'radios',
    '#title' => t('Have you been in contact with a coach/director for consideration of an athletic/music scholarship?'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#required' => TRUE,
  );

  $form['activities']['which_activity'] = array(
    '#type' => 'select',
    '#title' => t('Which extra curricular activity?'),
    '#options' => array(
      'none' => t('N/A'),
      'band' => t('Band'),
      'baseball' => t('Baseball'),
      'basketball' => t('Basketball'),
      'cheerleading' => t('Cheerleading'),
      'choir' => t('Choir'),
      'cross_country' => t('Cross Country'),
      'dance' => t('Dance'),
      'equestrian' => t('Equestrian'),
      'eSports' => t('eSports'),
      'football' => t('Football'),
      'golf' => t('Golf'),
      'lacrosse' => t('Lacrosse'),
      'soccer' => t('Soccer'),
      'softball' => t('Softball'),
      'tennis' => t('Tennis'),
      'theatre' => t('Theatre'),
      'track' => t('Track'),
      'student_government' => t('Student Government'),
      'volleyball' => t('Volleyball'),
      'wrestling' => t('Wrestling'),
      'other_student_organization' => t('Other Student Organization'),
    ),
    '#required' => TRUE,
  );

  $form['activities']['extra_activity'] = array(
    '#type' => 'select',
    '#title' => t('Additional extra curricular activity?'),
    '#options' => array(
      'none' => t('N/A'),
      'band' => t('Band'),
      'baseball' => t('Baseball'),
      'basketball' => t('Basketball'),
      'cheerleading' => t('Cheerleading'),
      'choir' => t('Choir'),
      'cross_country' => t('Cross Country'),
      'dance' => t('Dance'),
      'equestrian' => t('Equestrian'),
      'eSports' => t('eSports'),
      'football' => t('Football'),
      'golf' => t('Golf'),
      'lacrosse' => t('Lacrosse'),
      'soccer' => t('Soccer'),
      'softball' => t('Softball'),
      'tennis' => t('Tennis'),
      'theatre' => t('Theatre'),
      'track' => t('Track'),
      'student_government' => t('Student Government'),
      'volleyball' => t('Volleyball'),
      'wrestling' => t('Wrestling'),
      'other_student_organization' => t('Other Student Organization'),
    ),
    '#required' => TRUE,
  );

  $form['completed_npc'] = array(
    '#type' => 'fieldset',
    '#title' => t('You have completed the Tiffin University Net Price Calculator'),
    '#description' => t('Please press the submit button <strong>only once</strong>.<br>It may take a moment to process your information.'),
    '#collapsible' => FALSE,
  );


  $form['completed_npc']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#validate' => array('tiffin_npc_netprice_form_validate'),
    '#submit' => array('tiffin_npc_netprice_form_submit'),
  );
  return $form;
}

/**
 * Validates the form.
 */
function tiffin_npc_netprice_form_validate($form, &$form_state) {
/*  $year_of_birth = $form_state['values']['year_of_birth'];
  if ($year_of_birth && ($year_of_birth < 1900 || $year_of_birth > 2000)) {
    form_set_error('year_of_birth', t('Enter a year between 1900 and 2000.'));
  }*/
}

/**
 * Add a submit handler/function to the form.
 *
 * This will add a completion message to the screen when the
 * form successfully processes
 */

/**
 * @param $form
 * @param $form_state
 * @throws \Exception
 */
function tiffin_npc_netprice_form_submit($form, &$form_state) {
  // Handle page 1 submissions
  if ($form_state['clicked_button']['#id'] == 'edit-next') {
    if( $form_state['values']['agreement'] == "disagree") {
    return;
  }

    $form_state['storage']['page_two'] = TRUE;  // Am setting this to determine
    // which elements to display
    // when the page reloads.
    // Values below in the $form_state['storage'] array are saved
    // to carry forward to subsequent pages in the form.
    $form_state['storage']['page_one_values'] = $form_state['values'];
    $form_state['rebuild'] = TRUE;
  }
  // handle page 2 submissions
  else {

    $uniqid = uniqid_base36(TRUE);

    $fieldarray = array(
      'calculationGUID' => $uniqid,
      'first' => $form_state['values']['first'],
      'last' => $form_state['values']['last'],
      'email' => $form_state['values']['email'],
      'address' => $form_state['values']['address'],
      'address_2' => $form_state['values']['address_2'],
      'city' => $form_state['values']['city'],
      'state' => $form_state['values']['state'],
      'zip' => $form_state['values']['zip'],
      'county' => $form_state['values']['county'],
      'phone_type' => $form_state['values']['phone_type'],
      'phone_number' => $form_state['values']['phone_number'],
      'high_school_grad_year' => $form_state['values']['high_school_grad_year'],
      'prep_courses_score' => $form_state['values']['prep_courses_score'],
      'high_school_gpa' => $form_state['values']['high_school_gpa'],
      'satact' => $form_state['values']['satact'],
      'sat' => $form_state['values']['sat'],
      'act' => $form_state['values']['act'],
      'intended_major' => $form_state['values']['intended_major'],
      'born_before_1973' => $form_state['values']['born_before_1973'],
      'married' => $form_state['values']['married'],
      'in_masters_or_doctorate_program' => $form_state['values']['in_masters_or_doctorate_program'],
      'active_duty' => $form_state['values']['active_duty'],
      'veteran' => $form_state['values']['veteran'],
      'have_dependent_children' => $form_state['values']['have_dependent_children'],
      'other_dependents' => $form_state['values']['other_dependents'],
      'parents_deceased' => $form_state['values']['parents_deceased'],
      'emancipated_or_guardianship' => $form_state['values']['emancipated_or_guardianship'],
      'unaccompanied_youth' => $form_state['values']['unaccompanied_youth'],
      'homeless_youth' => $form_state['values']['homeless_youth'],
      'efc' => $form_state['values']['expected_family_income'],
      'ohio_residents' => $form_state['values']['ohio_residents'],
      'extra_curricular_activities' => $form_state['values']['extra_curricular_activities'],
      'scholarships' => $form_state['values']['scholarships'],
      'which_activity' => $form_state['values']['which_activity'],
      'extra_activity' => $form_state['values']['extra_activity'],
      'create_from_ip' => ip_address(),
      'create_date' => gmdate('Y-m-d\TH:i:s\Z'),
    );

    try {
      db_insert('tiffin_npc_table')->fields($fieldarray)->execute();
    }
    catch (PDOException $e) {
      drupal_set_message(t('Error: %message', array('%message' => $e->getMessage())), 'error');
    }

  $redirect = 'forms/netprice/success';
    $redirect_options = array('query' => array('uniqid' => $uniqid));
    drupal_goto($redirect, $redirect_options);
  }
}

function _get_actsat_score($actsat, $sat, $act, $gpa, $prep) {
  if($actsat == 'act') {
    $aindex = (doubleval($act) * 1.111) + (doubleval($gpa) * 12.5) + doubleval($prep);

  } elseif ($actsat == 'sat') {
    $sat_array = array("36"=>"1600", "35"=>"1540-1590", "34"=>"1490-1530", "33"=>"1440-1480", "32"=>"1400-1430", "31"=>"1360-1390", "30"=>"1330-1350", "29"=>"11290-1320", "28"=>"1250-1280", "27"=>"1210-1240", "26"=>"1170-1200", "25"=>"1130-1160", "24"=>"11090-1120", "23"=>"1050-1080", "22"=>"1020-1040", "21"=>"980-1010", "20"=>"940-970", "19"=>"900-930", "18"=>"860-890", "17"=>"820-850", "16"=>"770-810", "15"=>"720-760", "14"=>"670-710", "13"=>"620-660", "12"=>"560-610","11"=>"510-550");

  $sat_value = array_search($sat, $sat_array);

  $aindex = (doubleval($sat_value) * 1.11) + (doubleval($gpa) * 12.5) + $prep;

  }

  return $aindex;
}
/* @return $scholarship
 * @return $scholarship_value
 *
 */
function _get_scholarships($actsat_score) {
  switch ($actsat_score) {
    case doubleval($actsat_score) >= 73:
      $scholarship = "Trustee Scholarship";
      $scholarship_value = 13000;
      break;
    case doubleval($actsat_score) >= 58 && doubleval($actsat_score) <= 72.9:
      $scholarship = "President Scholarship";
      $scholarship_value = 12000;
      break;
    case doubleval($actsat_score) >= 55 && doubleval($actsat_score) <= 57.9:
      $scholarship = "Dean Grant";
      $scholarship_value = 9000;
      break;
/*    case doubleval($actsat_score) >= 50 && doubleval($actsat_score) <= 54.9:
      $scholarship = "Achievement Grant";
      $scholarship_value = 5000;
      break;*/
    case doubleval($actsat_score) >= 0 && doubleval($actsat_score) <= 49.9:
      $scholarship = "Nothing";
      $scholarship_value = 0000;
      break;
  }
  return array($scholarship, $scholarship_value);
}

/* @return $ohiochoicegrant
 * @return $ocog -> Ohio Community Grant
 *
 */
function _get_ohio_community_grant($efc, $ohio_resident) {
  if ($ohio_resident == 'Yes') {
    $ohiochoicegrant = 660;
  }
  switch ($efc) {
    case intval($efc) >= 2191 && intval($efc) <= 3850:
      $ocog = 0;
      break;
    case intval($efc) >= 2101 && intval($efc) <= 2190:
      $ocog = 600;
      break;
    case intval($efc) >= 2001 && intval($efc) <= 2100:
      $ocog = 798;
      break;
    case intval($efc) >= 1901 && intval($efc) <= 2000:
      $ocog = 1002;
      break;
    case intval($efc) >= 1801 && intval($efc) <= 1900:
      $ocog = 1200;
      break;
    case intval($efc) >= 1701 && intval($efc) <= 1800:
      $ocog = 1398;
      break;
    case intval($efc) >= 1601 && intval($efc) <= 1700:
      $ocog = 1602;
      break;
    case intval($efc) >= 1501 && intval($efc) <= 1600:
      $ocog = 1800;
      break;
    case intval($efc) >= 1401 && intval($efc) <= 1500:
      $ocog = 1998;
      break;
    case intval($efc) >= 1301 && intval($efc) <= 1400:
      $ocog = 2202;
      break;
    case intval($efc) >= 1201 && intval($efc) <= 1300:
      $ocog = 2400;
      break;
    case intval($efc) >= 1101 && intval($efc) <= 1200:
      $ocog = 2598;
      break;
    case intval($efc) >= 1001 && intval($efc) <= 1100:
      $ocog = 2802;
      break;
    case intval($efc) >= 901 && intval($efc) <= 1000:
      $ocog = 3000;
      break;
    case intval($efc) >= 801 && intval($efc) <= 900:
      $ocog = 3198;
      break;
    case intval($efc) >= 701 && intval($efc) <= 800:
      $ocog = 3402;
      break;
    case intval($efc) >= 601 && intval($efc) <= 700:
      $ocog = 3600;
      break;
    case intval($efc) >= 501 && intval($efc) <= 600:
      $ocog = 3798;
      break;
    case intval($efc) >= 401 && intval($efc) <= 500:
      $ocog = 4002;
      break;
    case intval($efc) >= 301 && intval($efc) <= 400:
      $ocog = 4200;
      break;
    case intval($efc) >= 201 && intval($efc) <= 300:
      $ocog = 4398;
      break;
    case intval($efc) >= 101 && intval($efc) <= 200:
      $ocog = 4602;
      break;
    case intval($efc) >= 1 && intval($efc) <= 100:
      $ocog = 4800;
      break;
    case intval($efc) == 0:
      $ocog = 4992;
      break;
  }
  if (isset($ohiochoicegrant) && $ohiochoicegrant > 0) {
    return array($ohiochoicegrant, $ocog);
  }
  else {
    return $ocog;
  }
}

  /* @return $pell -> Pell Grant amount
   * @return $staffordloan -> Stafford Loan amount
   *
   */
  function _get_pell_grant($efc) {
   $staffordloan = 3500;
   $base_pell = 5780;

   if($efc == intval(0)) {
   $pell = 5775;
   } elseif (intval($efc) > 5158) {
     $pell = 0;
   } elseif (intval($efc) < 100) {
     $pell = 5680;
   } else {
     $multiplier = intval($efc) / 100;
     $pell = $base_pell - (100 * intval($multiplier));
   }

   return array($pell, $staffordloan);
  }

/* Create a unique string as the record id for submissions
 *
 * @return $uniqid
 */
function uniqid_base36($more_entropy=false) {
  $s = uniqid('', $more_entropy);
  if (!$more_entropy)
    return base_convert($s, 16, 36);

  $hex = substr($s, 0, 13);
  $dec = $s[13] . substr($s, 15); // skip the dot
  return base_convert($hex, 16, 36) . base_convert($dec, 10, 36);
}

/**
 * Modify the drupal mail system to send HTML emails.
 */
class TiffinMailSystem implements MailSystemInterface {
  /**
   * Concatenate and wrap the e-mail body for plain-text mails.
   *
   * @param array $message
   *   A message array, as described in hook_mail_alter().
   *
   * @return array
   *   The formatted $message.
   */
  public function format(array $message) {
    $message['body'] = implode("\n\n", $message['body']);
    return $message;
  }

  /**
   * Send an e-mail message, using Drupal variables and default settings.
   *
   * @see http://php.net/manual/en/function.mail.php
   * @see drupal_mail()
   *
   * @param array $message
   *   A message array, as described in hook_mail_alter().
   *
   * @return bool
   *   TRUE if the mail was successfully accepted, otherwise FALSE.
   */
  public function mail(array $message) {
    $mimeheaders = array();
    foreach ($message['headers'] as $name => $value) {
      $mimeheaders[] = $name . ': ' . mime_header_encode($value);
    }
    $line_endings = variable_get('mail_line_endings', MAIL_LINE_ENDINGS);
    return mail(
      $message['to'],
      mime_header_encode($message['subject']),
      // Note: e-mail uses CRLF for line-endings. PHP's API requires LF
      // on Unix and CRLF on Windows. Drupal automatically guesses the
      // line-ending format appropriate for your system. If you need to
      // override this, adjust $conf['mail_line_endings'] in settings.php.
      preg_replace('@\r?\n@', $line_endings, $message['body']),
      // For headers, PHP's API suggests that we use CRLF normally,
      // but some MTAs incorrectly replace LF with CRLF. See #234403.
      implode("\n", $mimeheaders)
    );
  }
}

function tiffin_npc_mail($key, &$message, $params) {

  if($key == 'npc_calculator') {
    $message['subject'] = 'Tiffin University Net Price Calculation';
    $message['headers']['MIME-Version'] = '1.0';
    $message['headers']['Content-Type'] = 'multipart/mixed;';
    $message['headers']['Content-Type'] = 'text/html;';
    $message['from'] = 'webmaster@tiffin.edu';
    $message['to'] = t($params['recipient']);
    $message['body'][] = t($params['success_body']);
  }
}
